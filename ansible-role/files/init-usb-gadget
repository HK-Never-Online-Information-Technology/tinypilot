#!/bin/bash

# Configures USB gadgets, see: docs/usb-gadget-driver.md

# Exit on first error.
set -e

# Echo commands to stdout.
set -x

# Treat undefined environment variables as errors.
set -u

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
# shellcheck source=lib/usb-gadget.sh
source "${SCRIPT_DIR}/lib/usb-gadget.sh"

print_help() {
  cat << EOF
Usage: ${0##*/} [-h]
Init USB gadget.
  -h Display this help and exit.
EOF
}

# Parse command-line arguments.
while getopts "h" opt; do
  case "${opt}" in
    h)
      print_help
      exit
      ;;
    *)
      print_help >&2
      exit 1
  esac
done

modprobe libcomposite

# Adapted from https://github.com/girst/hardpass-sendHID/blob/master/README.md

cd "${USB_GADGET_PATH}"
mkdir -p "${USB_DEVICE_DIR}"
cd "${USB_DEVICE_DIR}"

echo 0x0110 > bcdUSB    # USB1.10
echo 0x00 > bDeviceClass
echo 0x00 > bDeviceSubClass
echo 0x00 > bDeviceProtocol
echo 0x08 > bMaxPacketSize0
echo 0x01 > bNumConfigurations
echo 0x0f39 > idVendor
echo 0x0603 > idProduct
echo 0x0100 > bcdDevice # v1.0.0

mkdir -p "$USB_STRINGS_DIR"
echo "Heng Yu Technology" > "${USB_STRINGS_DIR}/manufacturer"
echo "S60G" > "${USB_STRINGS_DIR}/product"
# TODO: confirm device serial number (removed for now because field not present in usb-devices output)

# Keyboard
mkdir -p "$USB_KEYBOARD_FUNCTIONS_DIR"
echo 0x01 > "${USB_KEYBOARD_FUNCTIONS_DIR}/protocol" # Keyboard
echo 0x03 > "${USB_KEYBOARD_FUNCTIONS_DIR}/class" # HID
echo 0x01 > "${USB_KEYBOARD_FUNCTIONS_DIR}/subclass" # Boot interface subclass
echo 8 > "${USB_KEYBOARD_FUNCTIONS_DIR}/report_length"
# Write the report descriptor
D=$(mktemp)

{
  echo -ne \\x05\\x01       # Usage Page (Generic Desktop Ctrls)
  echo -ne \\x09\\x06       # Usage (Keyboard)
  echo -ne \\xA1\\x01       # Collection (Application)
  echo -ne \\x05\\x07       #   Usage Page (Kbrd/Keypad)
  echo -ne \\x19\\xE0       #   Usage Minimum (0xE0)
  echo -ne \\x29\\xE7       #   Usage Maximum (0xE7)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x25\\x01       #   Logical Maximum (1)
  echo -ne \\x75\\x01       #   Report Size (1)
  echo -ne \\x95\\x08       #   Report Count (8)
  echo -ne \\x81\\x02       #   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x75\\x08       #   Report Size (8)
  echo -ne \\x95\\x01       #   Report Count (1)
  echo -ne \\x81\\x03       #   Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x05\\x08       #   Usage Page (LEDs)
  echo -ne \\x19\\x01       #   Usage Minimum (Num Lock)
  echo -ne \\x29\\x05       #   Usage Maximum (Kana)
  echo -ne \\x75\\x01       #   Report Size (1)
  echo -ne \\x95\\x05       #   Report Count (5)
  echo -ne \\x91\\x02       #   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\x75\\x03       #   Report Size (3)
  echo -ne \\x95\\x01       #   Report Count (1)
  echo -ne \\x91\\x03       #   Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\x05\\x07       #   Usage Page (Kbrd/Keypad)
  echo -ne \\x19\\x00       #   Usage Minimum (0x00)
  echo -ne \\x29\\x65       #   Usage Maximum (0x65)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x25\\x65       #   Logical Maximum (101)
  echo -ne \\x75\\x08       #   Report Size (8)
  echo -ne \\x95\\x06       #   Report Count (6)
  echo -ne \\x81\\x00       #   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\xC0             # End Collection
} >> "$D"
cp "$D" "${USB_KEYBOARD_FUNCTIONS_DIR}/report_desc"
# Enable pre-boot events (if the gadget driver supports it).
if [[ -f "${USB_KEYBOARD_FUNCTIONS_DIR}/no_out_endpoint" ]]; then
  echo 1 > "${USB_KEYBOARD_FUNCTIONS_DIR}/no_out_endpoint"
fi

# Sys Control
mkdir -p "$USB_SYS_CONTROL_FUNCTIONS_DIR"
echo 0 > "${USB_SYS_CONTROL_FUNCTIONS_DIR}/protocol"
echo 0 > "${USB_SYS_CONTROL_FUNCTIONS_DIR}/subclass"
echo 7 > "${USB_SYS_CONTROL_FUNCTIONS_DIR}/report_length"
# Write the report descriptor
D=$(mktemp)
{
  echo -ne \\x05\\x01       # Usage Page (Generic Desktop Ctrls)
  echo -ne \\x09\\x80       # Usage (Sys Control)
  echo -ne \\xA1\\x01       # Collection (Application)
  echo -ne \\x85\\x02       #   Report ID (2)
  echo -ne \\x09\\x81       #   Usage (Sys Power Down)
  echo -ne \\x09\\x82       #   Usage (Sys Sleep)
  echo -ne \\x09\\x83       #   Usage (Sys Wake Up)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x25\\x01       #   Logical Maximum (1)
  echo -ne \\x75\\x01       #   Report Size (1)
  echo -ne \\x95\\x03       #   Report Count (3)
  echo -ne \\x81\\x06       #   Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x75\\x05       #   Report Size (5)
  echo -ne \\x95\\x01       #   Report Count (1)
  echo -ne \\x81\\x01       #   Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x06\\x00\\xFF #   Usage Page (Vendor Defined 0xFF00)
  echo -ne \\x09\\x01       #   Usage (0x01)
  echo -ne \\x85\\x01       #   Report ID (1)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x26\\xFF\\x00 #   Logical Maximum (255)
  echo -ne \\x75\\x08       #   Report Size (8)
  echo -ne \\x95\\x07       #   Report Count (7)
  echo -ne \\xB1\\x00       #   Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\xC0             # End Collection
  echo -ne \\x05\\x0C       # Usage Page (Consumer)
  echo -ne \\x09\\x01       # Usage (Consumer Control)
  echo -ne \\xA1\\x01       # Collection (Application)
  echo -ne \\x85\\x03       #   Report ID (3)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x25\\x01       #   Logical Maximum (1)
  echo -ne \\x09\\xB5       #   Usage (Scan Next Track)
  echo -ne \\x09\\xB6       #   Usage (Scan Previous Track)
  echo -ne \\x09\\xB7       #   Usage (Stop)
  echo -ne \\x09\\xCD       #   Usage (Play/Pause)
  echo -ne \\x09\\xE2       #   Usage (Mute)
  echo -ne \\x09\\xE5       #   Usage (Bass Boost)
  echo -ne \\x09\\xE7       #   Usage (Loudness)
  echo -ne \\x09\\xE9       #   Usage (Volume Increment)
  echo -ne \\x09\\xEA       #   Usage (Volume Decrement)
  echo -ne \\x0A\\x52\\x01 #   Usage (Bass Increment)
  echo -ne \\x0A\\x53\\x01 #   Usage (Bass Decrement)
  echo -ne \\x0A\\x54\\x01 #   Usage (Treble Increment)
  echo -ne \\x0A\\x55\\x01 #   Usage (Treble Decrement)
  echo -ne \\x0A\\x83\\x01 #   Usage (AL Consumer Control Configuration)
  echo -ne \\x0A\\x8A\\x01 #   Usage (AL Email Reader)
  echo -ne \\x0A\\x92\\x01 #   Usage (AL Calculator)
  echo -ne \\x0A\\x94\\x01 #   Usage (AL Local Machine Browser)
  echo -ne \\x0A\\x21\\x02 #   Usage (AC Search)
  echo -ne \\x0A\\x23\\x02 #   Usage (AC Home)
  echo -ne \\x0A\\x24\\x02 #   Usage (AC Back)
  echo -ne \\x0A\\x25\\x02 #   Usage (AC Forward)
  echo -ne \\x0A\\x26\\x02 #   Usage (AC Stop)
  echo -ne \\x0A\\x27\\x02 #   Usage (AC Refresh)
  echo -ne \\x0A\\x2A\\x02 #   Usage (AC Bookmarks)
  echo -ne \\x75\\x01       #   Report Size (1)
  echo -ne \\x95\\x18       #   Report Count (24)
  echo -ne \\x81\\x02       #   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\xC0             # End Collection
} >> "$D"
cp "$D" "${USB_SYS_CONTROL_FUNCTIONS_DIR}/report_desc"

mkdir -p "${USB_CONFIG_DIR}"
echo 0xa0 > "${USB_CONFIG_DIR}/bmAttributes" # Atr
echo 0x02 > "${USB_CONFIG_DIR}/bNumInterfaces" # #Ifs
echo 0x01 > "${USB_CONFIG_DIR}/bConfigurationValue" # Cfg#(might be wrong)
echo 0x32 > "${USB_CONFIG_DIR}/MaxPower" # MxPwr

CONFIGS_STRINGS_DIR="${USB_CONFIG_DIR}/${USB_STRINGS_DIR}"
mkdir -p "${CONFIGS_STRINGS_DIR}"
echo "Config ${USB_CONFIG_INDEX}: ECM network" > "${CONFIGS_STRINGS_DIR}/configuration"

ln -s "${USB_KEYBOARD_FUNCTIONS_DIR}" "${USB_CONFIG_DIR}/"
ln -s "${USB_SYS_CONTROL_FUNCTIONS_DIR}" "${USB_CONFIG_DIR}/"

usb_gadget_activate
